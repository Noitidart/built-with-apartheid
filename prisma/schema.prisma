// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id // nanoid from frontend
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Auth fields - a user may have email but not yet an account.
  // Having an account is signified by having a password.
  email    String? @unique
  password String?
  isMod    Boolean @default(false)
  isBanned Boolean @default(false)

  // Relations
  // (One-to-many-required) One user can have zero or many scans WHILE one scan belongs to exactly one user
  scans                 Scan[]
  // (One-to-many-optional) One user can have zero or many interactions WHILE one interaction can belong to zero or one user
  interactions          Interaction[]
  // (One-to-many-required) One user can have zero or many posts WHILE one post belongs to exactly one user
  posts                 Post[]
  // (Many-to-many) One user can use many IPs WHILE one IP can be used by many users
  ips                   Ip[]
  // (Many-to-many) One user can be target of many interactions WHILE one interaction can target many users
  targetForInteractions Interaction[] @relation("InteractionTargetUsers")
  // (Many-to-many-optional) One user can watch zero or many websites WHILE one website can be watched by zero or many users
  watchedWebsites       Website[]     @relation("WatchedWebsites")
}

model Website {
  id        Int      @id @default(autoincrement())
  hostname  String   @unique // normalized by making it lowercase
  isMasjid  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Relations
  // (One-to-many-required) One website can have zero or many scans WHILE one scan belongs to exactly one website
  scans        Scan[]
  // (One-to-many-optional) One website can have zero or many interactions WHILE one interaction can belong to zero or one website
  interactions Interaction[]
  // (One-to-many-required) One website can have zero or many posts WHILE one post belongs to exactly one website
  posts        Post[]
  // (One-to-many-optional) One website can have zero or many milestones WHILE one milestone can belong to zero or one website
  milestones   Milestone[]
  // (Many-to-many-optional) One website can be watched by zero or many users WHILE one user can watch zero or many websites
  watchers     User[]        @relation("WatchedWebsites")
  reports  Report[]
}

model Ip {
  id    Int    @id @default(autoincrement())
  value String @unique

  // CF metadata
  city          String?
  country       String?
  latitude      String?
  longitude     String?
  postalCode    String?
  metroCode     String?
  region        String?
  regionCode    String?
  timezone      String?
  botScore      Int?
  isVerifiedBot Boolean @default(false)

  isBanned  Boolean  @default(false)
  createdAt DateTime @default(now()) // First seen
  updatedAt DateTime @default(now()) @updatedAt // Last seen

  // Relations
  // (Many-to-many) One IP can be used by many users WHILE one user can use many IPs
  users                 User[]
  // (One-to-many-required) One IP can have zero or many interactions WHILE one interaction belongs to exactly one IP
  interactions          Interaction[]
  // (Many-to-many) One IP can be target of many interactions WHILE one interaction can target many IPs
  targetForInteractions Interaction[] @relation("InteractionTargetIps")
}

model Scan {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  /// [TCompanyStatusChanges]
  changes Json

  // Relations
  // (One-to-many-required) One scan belongs to exactly one user WHILE a user can have zero or many scans
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // (One-to-many-required) One scan belongs to exactly one website WHILE a website can have zero or many scans
  website   Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  websiteId Int

  // (One-to-one) One scan belongs to exactly one interaction WHILE an interaction can have zero or one scan
  interaction   Interaction @relation(fields: [interactionId], references: [id], onDelete: Cascade)
  interactionId Int         @unique

  // many to one
  reports Report[]
}

model Interaction {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now()) @updatedAt
  type      InteractionType
  /// [TInteractionData]
  data      Json?

  // Relations
  // (One-to-many-optional) One interaction can belong to zero or one user WHILE a user can have zero or many interactions
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  // (One-to-many-optional) One interaction can belong to zero or one website WHILE a website can have zero or many interactions
  // Note: MOD_ADDED and MOD_REMOVED interaction types do not have an associated website
  website   Website? @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  websiteId Int?

  // (One-to-many-optional) One interaction can belong to zero or one IP WHILE an IP can have zero or many interactions
  // Note: System-generated interactions (like milestones) will not have an associated IP
  ip   Ip?  @relation(fields: [ipId], references: [id])
  ipId Int?

  // (One-to-one) One interaction can have zero or one scan WHILE a scan belongs to exactly one interaction
  scan Scan?

  // (One-to-one) One interaction can have zero or one milestone WHILE a milestone belongs to exactly one interaction
  milestone Milestone? @relation("MilestoneInteraction")

  // (One-to-many-required) One interaction can have zero or many milestone data interactions WHILE a milestone data interaction belongs to exactly one interaction
  // Note: Only human interactions (non-"MILESTONE type" interactions) can be the interaction referred to by milestone.dataInteraction.
  // Note: Is many because one scan can detect multiple companies, which means two milestones with milestone.data.type of "company-added".
  dataInteractionForMilestones Milestone[] @relation("MilestoneDataInteraction")

  // (One-to-one) One interaction can have zero or one post WHILE a post belongs to exactly one interaction
  post Post?

  // (Many-to-many) One interaction can target many users WHILE one user can be target of many interactions
  targetUsers User[] @relation("InteractionTargetUsers")
  // (Many-to-many) One interaction can target many IPs WHILE one IP can be target of many interactions
  targetIps   Ip[]   @relation("InteractionTargetIps")

  // (One-to-one) One interaction can have zero or one report WHILE a report belongs to exactly one interaction
  report Report?
}

enum InteractionType {
  SCAN
  POST
  MILESTONE
  MOD_ADDED
  MOD_REMOVED
  BANNED_USER
  UNBANNED_USER
  BANNED_IPS
  UNBANNED_IPS
  WATCHED
  UNWATCHED
  REPORT
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  body      String

  // Relations
  // (One-to-many-required) One post belongs to exactly one user WHILE a user can have zero or many posts
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // (One-to-many-required) One post belongs to exactly one website WHILE a website can have zero or many posts
  website   Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  websiteId Int

  // (One-to-one) One post belongs to exactly one interaction WHILE an interaction can have zero or one post
  interaction   Interaction @relation(fields: [interactionId], references: [id], onDelete: Cascade)
  interactionId Int         @unique
}

model Milestone {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  /// [TMilestoneData]
  data      Json

  // Relations
  // (One-to-many-optional) One milestone can belong to zero or one website WHILE a website can have zero or many milestones
  // Note: MOD_* interaction types do not have an associated website (though no MOD_* milestones are planned)
  website   Website? @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  websiteId Int?

  // (One-to-one) One milestone belongs to exactly one interaction WHILE an interaction can have zero or one milestone
  interaction   Interaction @relation("MilestoneInteraction", fields: [interactionId], references: [id], onDelete: Cascade)
  interactionId Int         @unique

  // (One-to-many-required) One milestone data belongs to exactly one interaction WHILE an interaction can have zero or many milestone data
  dataInteraction   Interaction @relation("MilestoneDataInteraction", fields: [dataInteractionId], references: [id], onDelete: Cascade)
  dataInteractionId Int
}

model Report {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  message       String
  scan          Scan?       @relation(fields: [scanId], references: [id], onDelete: Cascade)
  scanId        Int?
  website       Website     @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  websiteId     Int
  interaction   Interaction @relation(fields: [interactionId], references: [id], onDelete: Cascade)
  interactionId Int         @unique
}
